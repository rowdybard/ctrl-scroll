#!/usr/bin/env node
import 'dotenv/config';
import fs from 'fs-extra';
import path from 'path';
import slugify from 'slugify';
import OpenAI from 'openai';

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const SITE_DIR = process.env.SITE_DIR || './site';
const SITE_URL = process.env.SITE_URL || 'http://localhost:3000';
const ALLOWLIST = (process.env.ALLOWLIST_SUBS || 'news').split(',').map(s => s.trim());
const DENYLIST = (process.env.DENYLIST || 'NSFW').split(',').map(s => s.trim().toLowerCase());
const MAX_POSTS = parseInt(process.env.MAX_POSTS || '3');
const MIN_SCORE = parseInt(process.env.MIN_SCORE || '50');
const MAX_AGE_HOURS = parseInt(process.env.MAX_AGE_HOURS || '48');
const USER_AGENT = process.env.USER_AGENT || 'CtrlScrollBot/1.0';

// HTML Templates
const postTemplate = (title, summary, sourceUrl, subreddit, score, date) => `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${escapeHtml(title)} - Ctrl Scroll</title>
  <style>
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; line-height: 1.6; background: #f5f5f5; }
    .container { background: white; padding: 40px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
    h1 { color: #333; margin-top: 0; }
    .meta { color: #666; font-size: 14px; margin-bottom: 20px; }
    .summary { color: #444; font-size: 16px; margin-bottom: 30px; }
    .attribution { background: #f9f9f9; border-left: 3px solid #ff4500; padding: 15px; margin-top: 30px; font-size: 14px; }
    .attribution a { color: #ff4500; text-decoration: none; }
    .attribution a:hover { text-decoration: underline; }
    .back { display: inline-block; margin-bottom: 20px; color: #666; text-decoration: none; }
    .back:hover { color: #333; }
  </style>
</head>
<body>
  <div class="container">
    <a href="/" class="back">‚Üê Back to Home</a>
    <h1>${escapeHtml(title)}</h1>
    <div class="meta">r/${escapeHtml(subreddit)} ‚Ä¢ ${score} upvotes ‚Ä¢ ${date}</div>
    <div class="summary">${escapeHtml(summary)}</div>
    <div class="attribution">
      <strong>Source:</strong> This is a summary of a Reddit post. 
      <a href="${escapeHtml(sourceUrl)}" target="_blank" rel="nofollow ugc">View original on Reddit</a>
    </div>
  </div>
</body>
</html>`;

const indexTemplate = (posts) => `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Ctrl Scroll - AI-Curated Reddit News</title>
  <style>
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; max-width: 900px; margin: 0 auto; padding: 20px; background: #f5f5f5; }
    .header { text-align: center; margin-bottom: 40px; }
    .header h1 { color: #333; margin-bottom: 10px; }
    .header p { color: #666; }
    .posts { display: grid; gap: 20px; }
    .post-card { background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); transition: transform 0.2s; }
    .post-card:hover { transform: translateY(-2px); box-shadow: 0 4px 8px rgba(0,0,0,0.15); }
    .post-card h2 { margin-top: 0; }
    .post-card h2 a { color: #333; text-decoration: none; }
    .post-card h2 a:hover { color: #ff4500; }
    .post-meta { color: #666; font-size: 14px; margin-bottom: 10px; }
    .post-summary { color: #555; }
    .footer { text-align: center; margin-top: 60px; padding: 20px; color: #666; font-size: 14px; }
  </style>
</head>
<body>
  <div class="header">
    <h1>üìú Ctrl Scroll</h1>
    <p>AI-curated summaries from Reddit's top discussions</p>
  </div>
  <div class="posts">
    ${posts.map(p => `
    <div class="post-card">
      <h2><a href="/posts/${p.slug}.html">${escapeHtml(p.title)}</a></h2>
      <div class="post-meta">r/${escapeHtml(p.subreddit)} ‚Ä¢ ${p.score} upvotes ‚Ä¢ ${p.date}</div>
      <div class="post-summary">${escapeHtml(p.summary.substring(0, 200))}...</div>
    </div>
    `).join('')}
  </div>
  <div class="footer">
    Generated by Ctrl Scroll ‚Ä¢ Content sourced from Reddit
  </div>
</body>
</html>`;

function escapeHtml(text) {
  const map = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#039;' };
  return text.replace(/[&<>"']/g, m => map[m]);
}

async function fetchRedditPosts(subreddit) {
  const url = `https://www.reddit.com/r/${subreddit}/hot.json?limit=25`;
  const response = await fetch(url, { headers: { 'User-Agent': USER_AGENT } });
  if (!response.ok) throw new Error(`Reddit API error: ${response.status}`);
  const data = await response.json();
  return data.data.children.map(c => c.data);
}

function filterPost(post) {
  // Check NSFW
  if (post.over_18) return false;
  
  // Check age
  const ageHours = (Date.now() - post.created_utc * 1000) / (1000 * 60 * 60);
  if (ageHours > MAX_AGE_HOURS) return false;
  
  // Check score
  if (post.score < MIN_SCORE) return false;
  
  // Check denylist
  const text = `${post.title} ${post.selftext}`.toLowerCase();
  if (DENYLIST.some(word => text.includes(word))) return false;
  
  return true;
}

async function summarizePost(post) {
  const prompt = `Summarize this Reddit post in 2-3 sentences. Be factual and neutral. Do not include personal advice, medical, or financial guidance.

Title: ${post.title}
Content: ${post.selftext || 'No additional text.'}`;

  const completion = await openai.chat.completions.create({
    model: 'gpt-4o-mini',
    messages: [{ role: 'user', content: prompt }],
    max_tokens: 150,
    temperature: 0.7,
  });

  return completion.choices[0].message.content.trim();
}

function formatDate(timestamp) {
  return new Date(timestamp * 1000).toLocaleDateString('en-US', { 
    month: 'short', day: 'numeric', year: 'numeric' 
  });
}

async function generate() {
  console.log('üöÄ Starting Ctrl Scroll generator...');
  
  // Ensure directories exist
  await fs.ensureDir(SITE_DIR);
  await fs.ensureDir(path.join(SITE_DIR, 'posts'));
  
  const allPosts = [];
  
  // Fetch from each subreddit
  for (const subreddit of ALLOWLIST) {
    console.log(`üì° Fetching r/${subreddit}...`);
    try {
      const posts = await fetchRedditPosts(subreddit);
      const filtered = posts.filter(filterPost).slice(0, MAX_POSTS);
      
      for (const post of filtered) {
        console.log(`  ‚ú® Processing: ${post.title.substring(0, 50)}...`);
        
        const summary = await summarizePost(post);
        const slug = slugify(post.title, { lower: true, strict: true }).substring(0, 100);
        const date = formatDate(post.created_utc);
        
        // Write individual post page
        const postHtml = postTemplate(
          post.title,
          summary,
          `https://reddit.com${post.permalink}`,
          post.subreddit,
          post.score,
          date
        );
        
        await fs.writeFile(path.join(SITE_DIR, 'posts', `${slug}.html`), postHtml);
        
        allPosts.push({
          title: post.title,
          slug,
          summary,
          subreddit: post.subreddit,
          score: post.score,
          date,
          url: `https://reddit.com${post.permalink}`,
          created: post.created_utc
        });
        
        // Rate limit
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    } catch (error) {
      console.error(`‚ùå Error fetching r/${subreddit}:`, error.message);
    }
  }
  
  // Sort by creation time, limit to 30
  allPosts.sort((a, b) => b.created - a.created);
  const recentPosts = allPosts.slice(0, 30);
  
  // Write index page
  console.log('üìù Writing index.html...');
  await fs.writeFile(path.join(SITE_DIR, 'index.html'), indexTemplate(recentPosts));
  
  // Write sitemap.xml
  console.log('üó∫Ô∏è  Writing sitemap.xml...');
  const sitemap = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <url><loc>${SITE_URL}/</loc><priority>1.0</priority></url>
  ${recentPosts.map(p => `<url><loc>${SITE_URL}/posts/${p.slug}.html</loc></url>`).join('\n  ')}
</urlset>`;
  await fs.writeFile(path.join(SITE_DIR, 'sitemap.xml'), sitemap);
  
  // Write robots.txt
  console.log('ü§ñ Writing robots.txt...');
  const robots = `User-agent: *
Allow: /
Sitemap: ${SITE_URL}/sitemap.xml`;
  await fs.writeFile(path.join(SITE_DIR, 'robots.txt'), robots);
  
  console.log(`‚úÖ Generated ${allPosts.length} posts successfully!`);
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  generate().catch(console.error);
}

export default generate;

